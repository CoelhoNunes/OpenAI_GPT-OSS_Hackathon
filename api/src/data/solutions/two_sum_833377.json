{
  "python_solution": "def twoSum(nums, target):\n    hashmap = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hashmap:\n            return [hashmap[complement], i]\n        hashmap[num] = i\n    return []",
  "cpp_solution": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> hashmap;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (hashmap.find(complement) != hashmap.end()) {\n                return {hashmap[complement], i};\n            }\n            hashmap[nums[i]] = i;\n        }\n        return {};\n    }\n};",
  "explanation": "Use a hash map to store each number and its index. For each number, check if its complement (target - number) exists in the map. If found, return the indices.",
  "complexity": "Time: O(n), Space: O(n) - Single pass through array with hash map storage"
}